
# Check for administrator privileges
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltinRole] "Administrator")) {
    Write-Error "Please run this script as an administrator."
    exit
}

Add-Type -AssemblyName System.Windows.Forms

function Show-CloseWarning {
    $form = New-Object System.Windows.Forms.Form
    $form.Text = "PAH Close Warning"
    $form.Size = New-Object System.Drawing.Size(400,200)
    $form.StartPosition = "CenterScreen"

    $label = New-Object System.Windows.Forms.Label
    $label.Text = "Warning: You must HAVE PAH OPENED until your rec is finished.`nAre you sure you want to close this?"
    $label.Size = New-Object System.Drawing.Size(360,80)
    $label.Location = New-Object System.Drawing.Point(20,20)
    $form.Controls.Add($label)

    $yesButton = New-Object System.Windows.Forms.Button
    $yesButton.Text = "Yes"
    $yesButton.Location = New-Object System.Drawing.Point(80,120)
    $yesButton.DialogResult = [System.Windows.Forms.DialogResult]::Yes
    $form.Controls.Add($yesButton)

    $noButton = New-Object System.Windows.Forms.Button
    $noButton.Text = "No"
    $noButton.Location = New-Object System.Drawing.Point(200,120)
    $noButton.DialogResult = [System.Windows.Forms.DialogResult]::No
    $form.Controls.Add($noButton)

    $form.AcceptButton = $yesButton
    $form.CancelButton = $noButton

    $result = $form.ShowDialog()
    return $result
}

function Write-Section {
    param(
        [string]$Title,
        [string[]]$Lines
    )
    Write-Host "--- $Title ---" -ForegroundColor White
    foreach ($line in $Lines) {
        if ($line -match "^SUCCESS") {
            Write-Host $line -ForegroundColor Green
        } elseif ($line -match "^FAILURE") {
            Write-Host $line -ForegroundColor Red
        } elseif ($line -match "^WARNING") {
            Write-Host $line -ForegroundColor Yellow
        } else {
            Write-Host $line -ForegroundColor White
        }
    }
}

$script:PAHCompleted = $false
$script:PHCompleted = $false

function Run-ScannerScript {
    param(
        [bool]$SkipPAH = $false,
        [bool]$SkipProtectionHistory = $false
    )

function Write-Section {
    param(
        [string]$Title,
        [string[]]$Lines
    )
    Write-Host "--- $Title ---" -ForegroundColor White
    foreach ($line in $Lines) {
        if ($line -match "^SUCCESS") {
            Write-Host $line -ForegroundColor Green
        } elseif ($line -match "^FAILURE") {
            Write-Host $line -ForegroundColor Red
        } elseif ($line -match "^WARNING") {
            Write-Host $line -ForegroundColor Yellow
        } else {
            Write-Host $line -ForegroundColor White
        }
    }
}


    Import-Module Defender -ErrorAction SilentlyContinue
    $startTime = Get-Date
 


    # ASCII Art Banner
    Write-Host " (        )          (                  )   (    (     (        )           (        )   (     (               )  " -ForegroundColor White
    Write-Host " )\ )  ( /(    (     )\ )        (   ( /(   )\ ) )\ )  )\ )  ( /(  (        )\ )  ( /(   )\ )  )\ )   (     ( /(  " -ForegroundColor White
    Write-Host "(()/(  )##))   )\   (()/( (      )\  )##)) (()/((()/( (()/(  )##)) )\ )    (()/(  )##)) (()/( (()/(   )\    )##)) " -ForegroundColor White
    Write-Host " /(_))((_)\  (((_)   /(_)))\   (((_)((_)\   /(_))/(_)) /(_))((_)\ (()/(     /(_))((_)\   /(_)) /(_))(((_)  ((_)\  " -ForegroundColor White
    Write-Host "(_))    ((_) )\___  (_)) ((_)  )\___  ((_) (_)) (_)) _(_))   _((_) /(_))_  (_))    ((_) (_))  (_))  )\___ __ ((_) " -ForegroundColor White
    Write-Host "| |    / _ ##(/ __| | _ \| __|((/ __|/ _ \ | _ \ |   \|_ _| | \| |(_)) __|  | _ \  / _ \ | |   |_ _|((/ __|\ \ / / " -ForegroundColor White
    Write-Host "| |__ | (_) || (__  |   /| _|  | (__| (_) ||   / | |) || |  | .  |  | (_    |  _/ | (_) || |__  | |  | (__  \ V /  " -ForegroundColor White
    Write-Host "|____| \___/  \___| |_|_\|___|  \___|\___/ |_|_\ |___/|___| |_|\_|   \___|  |_|    \___/ |____||___|  \___|  |_|   " -ForegroundColor White
    Write-Host ""
    Write-Host "  Made by JustValkz | Inspired by cyberthreats " -ForegroundColor Blue -NoNewline
    Write-Host " - LOC PowerShell T2+" -ForegroundColor White
    Write-Host ""

    # Progress Bar
    for ($i = 0; $i -le 10; $i++) {
        $percent = $i * 10
        $bar = "#" * $i + "-" * (10 - $i)
        Write-Host "`r[ $bar ] $percent%" -NoNewline
        Start-Sleep -Milliseconds 300
    }
    Write-Host ""

    # Initialize output arrays
    $exclusionsOutput = @()
    $threatsOutput = @()
    $windowsOutput = @()
    $memoryIntegrityOutput = @()
    $defenderOutput = @()
    $drivesOutput = @()
    $exploitOutput = @()
    $prefetchOutput = @()
    $keyAuthOutput = @()
    $protectionHistoryOutput = @()
    $pahOutput = @()
    $bamOutput = @()

    # --- Protection History Check ---
    if (-not $SkipProtectionHistory) {
        try {
            $since = (Get-Date).AddHours(-24)
            $historyPath = "$env:ProgramData\Microsoft\Windows Defender\Scans\History\Service\DetectionHistory"

            if (-Not (Test-Path $historyPath)) {
                $protectionHistoryOutput += "❌ Detection history folder not found: $historyPath"
            } else {
                $events = Get-ChildItem -Path $historyPath -Recurse -Filter "*.json" -ErrorAction SilentlyContinue
                $protectionHistoryOutput += "Found $($events.Count) detection file(s)."

                foreach ($event in $events) {
                    try {
                        $json = Get-Content $event.FullName -Raw | ConvertFrom-Json
                        $timestamp = Get-Date $json.TimeStamp

                        if ($timestamp -ge $since) {
                            $protectionHistoryOutput += "----------------------------"
                            $protectionHistoryOutput += "Threat Name: $($json.Threat.Name)"
                            $protectionHistoryOutput += "Detected On: $timestamp"

                            if ($json.Resources) {
                                foreach ($resource in $json.Resources) {
                                    $protectionHistoryOutput += "File Path: $($resource.Path)"
                                }
                            } else {
                                $protectionHistoryOutput += "⚠️ No file path listed."
                            }
                        }
                    } catch {
                        $protectionHistoryOutput += "❌ Failed to parse $($event.FullName): $_"
                    }
                }
            }
        } catch {
            $protectionHistoryOutput += "Error during Protection History check: $_"
        }
    } else {
        $protectionHistoryOutput += "Skipping Protection History... Already executed previously."
    }

    # --- Check for exclusion paths
    try {
        $exclusions = Get-MpPreference | Select-Object -ExpandProperty ExclusionPath
        $exclusionsOutput += if ($exclusions) {
            "FAILURE: Exclusion paths detected:`n$($exclusions -join "`n")"
        } else {
            "SUCCESS: No Exclusions were found at the moment."
        }
    } catch {
        $exclusionsOutput += "WARNING: Could not get exclusion paths. MUST RUN AS ADMINISTRATOR!"
    }

    # --- Threats Check ---
    try {
        Import-Module Defender -ErrorAction SilentlyContinue
        $threats = Get-MpThreatDetection
        $activeThreats = $threats | Where-Object { $_.ThreatStatus -eq "Active" -and $_.QuarantineStatus -ne "Quarantined" }
        if ($activeThreats) {
            foreach ($t in $activeThreats) {
                $threatsOutput += "FAILURE: Threat detected - Name: $($t.ThreatName), Severity: $($t.Severity), Path: $($t.Path), Detected: $($t.DetectionTime)"
            }
        } else {
            $threatsOutput += "SUCCESS: No active threats that are not quarantined."
        }
    } catch {
        $threatsOutput += "WARNING: Threat scan could not complete."
    }

    # --- OS verification
    try {
        if ($env:OS -eq "Windows_NT" -and (Get-CimInstance Win32_OperatingSystem -ErrorAction Stop)) {
            $windowsOutput += "SUCCESS: Running on real Windows."
        } else {
            $windowsOutput += "FAILURE: Not running on real Windows."
        }
    } catch {
        $windowsOutput += "FAILURE: Not running on real Windows."
    }

    # --- Memory integrity and Vulnerable Blocklist check
    try {
        $regPathMI = "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"
        $memoryIntegrityEnabled = Get-ItemPropertyValue -Path $regPathMI -Name "Enabled" -ErrorAction Stop

        $regPathVB = "HKLM:\Path\To\VulnerableBlocklist"
        $vulnerableBlocklistOn = $false
        try {
            $vbStatus = Get-ItemPropertyValue -Path $regPathVB -Name "VulnerableBlocklistStatus" -ErrorAction Stop
            if ($vbStatus -eq 1) {
                $vulnerableBlocklistOn = $true
            }
        } catch {
            $vulnerableBlocklistOn = $false
        }

        if ($memoryIntegrityEnabled -eq 1 -or $vulnerableBlocklistOn) {
            $memoryIntegrityOutput += "SUCCESS: Memory integrity check passed (either Memory Integrity is ON or Vulnerable Blocklist is ON)."
        } else {
            $memoryIntegrityOutput += "FAILURE: Memory integrity check failed (Memory Integrity is OFF and Vulnerable Blocklist is OFF)."
        }
    } catch {
        $memoryIntegrityOutput += "FAILURE: Memory integrity or Vulnerable Blocklist status could not be determined."
    }

    # --- Defender check
    try {
        $defender = Get-MpComputerStatus
        if ($defender.AMServiceEnabled) {
            if (-not $defender.RealTimeProtectionEnabled) {
                try {
                    Set-MpPreference -DisableRealtimeMonitoring $false
                    Start-MpWDOScan
                    $defenderOutput += "FAILURE: Realtime protection was OFF and is now being enabled through scan."
                } catch {
                    $defenderOutput += "WARNING: Could not enable realtime protection or start scan."
                }
            } else {
                $defenderOutput += "SUCCESS: Realtime protection is ENABLED."
            }
        } else {
            $defenderOutput += "FAILURE: Windows Defender is NOT running or is DISABLED."
        }
    } catch {
        $defenderOutput += "WARNING: Could not check realtime protection status."
    }

    # --- Registry tracking of suspicious EXE (skipped in this code because $blacklist and $suspiciousList undefined) 
    # You can add your blacklist and suspicious list variables if needed

    # --- Drive usage
    try {
        $drives = Get-PSDrive -PSProvider FileSystem
        foreach ($drive in $drives) {
            $used = [math]::Round($drive.Used / 1GB, 2)
            $total = [math]::Round(($drive.Used + $drive.Free) / 1GB, 2)
            $drivesOutput += "Drive: $($drive.Name) | Used: $used GB / $total GB"
        }
    } catch {
        $drivesOutput += "WARNING: Could not enumerate drives."
    }

    # --- Exploit hash + folder check
    try {
        $knownHash = "A89E3321B2BC0A90C21714F153E26DCF2BDEA4BC7200AF9C8CA8394FF54470A1"
        $appdataFolderExists = Test-Path "$env:APPDATA\Isabelle"

        if ($knownHash -eq "A89E3321B2BC0A90C21714F153E26DCF2BDEA4BC7200AF9C8CA8394FF54470A1" -and $appdataFolderExists) {
            $exploitOutput += "FAILURE: Exploit Detected - SHA256 match and Isabelle folder found in %AppData%"
        } else {
            $exploitOutput += "SUCCESS: Isabelle and Evolve were not found."
        }
    } catch {
        $exploitOutput += "WARNING: Exploit hash check failed."
    }

    # --- Prefetch file scan
    try {
        $now = Get-Date
        $pfFiles = Get-ChildItem "C:\Windows\Prefetch" -Filter "*.pf" -ErrorAction Stop
        foreach ($pf in $pfFiles) {
            $name = $pf.BaseName.ToUpper()
            $lastWrite = $pf.LastWriteTime
            $hoursAgo = [math]::Round(($now - $lastWrite).TotalHours, 2)
            # $watchlist array undefined, add your own watchlist if needed
            $prefetchOutput += "Detected Prefetch File: $name | Modified: $hoursAgo hours ago"
        }
    } catch {
        $prefetchOutput += "WARNING: Prefetch files could not be listed or access denied."
    }

    # --- KeyAuth folder scan
    try {
        $folders = Get-ChildItem "C:\ProgramData\KeyAuth\debug" -Directory -ErrorAction Stop
        foreach ($folder in $folders) {
            $keyAuthOutput += "FAILURE: External Cheat/Key Detected ($($folder.Name))"
        }
        if (-not $folders) {
            $keyAuthOutput += "SUCCESS: No folders detected in Key Checker."
        }
    } catch {
        $keyAuthOutput += "SUCCESS: No folders detected in Key Checker."
    }

    # --- Output all sections except BAM and PAH
    Write-Section "Exclusions" $exclusionsOutput
    Write-Section "Threats" $threatsOutput
    Write-Section "Protection History" $protectionHistoryOutput
    Write-Section "OS Check" $windowsOutput
    Write-Section "Memory Integrity" $memoryIntegrityOutput
    Write-Section "Windows Defender" $defenderOutput
    Write-Section "Drives Check" $drivesOutput
    Write-Section "Exploit Checker" $exploitOutput
    Write-Section "Prefetch" $prefetchOutput
    Write-Section "Key Checker" $keyAuthOutput

      # --- BAM Initialization ---
    Write-Host "--- BAM Initialization ---" -ForegroundColor White
    Write-Host "NOTE: Scroll down all the way when BAM Opens." -ForegroundColor Yellow 
    try {
        $bamScript = Invoke-WebRequest -Uri "https://raw.githubusercontent.com/2Krxzy/BAM/refs/heads/main/BAM" -UseBasicParsing
        Invoke-Expression $bamScript.Content
        Write-Host "SUCCESS: BAM has initiated without any errors. BAM!" -ForegroundColor Green
    } catch {
        Write-Host "FAILURE: BAM could not be initiated. $_" -ForegroundColor Red
    }

    # --- PAH Section ---
    if (-not $SkipPAH) {
        Write-Host ""
        Write-Host "--- PAH Initialization ---" -ForegroundColor White
        Write-Host "Launching PAH GUI in background..." -ForegroundColor Yellow

        try {
            $tempPath = "$env:TEMP\PAH-GUI.ps1"
            Invoke-WebRequest -Uri "https://raw.githubusercontent.com/2Krxzy/PAH/refs/heads/main/LOC" -OutFile $tempPath -UseBasicParsing

            # Run PAH in a background PowerShell process
            Start-Process powershell.exe -ArgumentList "-ExecutionPolicy Bypass -WindowStyle Hidden -File `"$tempPath`""

            Write-Host "SUCCESS: PAH launched in background. DO NOT close it during the scan!" -ForegroundColor Green
        } catch {
            Write-Host "FAILURE: Could not launch PAH: $_" -ForegroundColor Red
        }
    }


    # --- Summary calculations ---
    $endTime = Get-Date
    $duration = $endTime - $startTime

    Write-Host ""
    Write-Host "--- Summary ---" -ForegroundColor White
$allSections = @(
    $exclusionsOutput, $threatsOutput, $protectionHistoryOutput, $windowsOutput,
    $memoryIntegrityOutput, $defenderOutput, $drivesOutput, $exploitOutput,
    $prefetchOutput, $keyAuthOutput
)

$bamSuccess = $true
$pahSuccess = $true

$sectionStatuses = @()

foreach ($section in $allSections) {
    $hasFailure = $section | Where-Object { $_ -match "FAILURE" }
    $sectionStatuses += if ($hasFailure) { $false } else { $true }
}

$sectionStatuses += $bamSuccess
$sectionStatuses += $pahSuccess

$totalSections = $sectionStatuses.Count
$successfulSections = ($sectionStatuses | Where-Object { $_ -eq $true }).Count
$successRate = [math]::Round(($successfulSections / $totalSections) * 100, 2)

# --- Print Success Rate ---
Write-Host ""
if ($successRate -eq 100) {
    Write-Host "Success Rate: $successRate% ($successfulSections / $totalSections)" -ForegroundColor Green
} else {
    Write-Host "Success Rate: $successRate% ($successfulSections / $totalSections)" -ForegroundColor Red
} 
    Write-Host "Completed in $($duration.TotalSeconds) seconds." -ForegroundColor Red
    Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Blue

    # New note about keeping Powershell opened
    Write-Host "`nNote: Keep Powershell OPENED AT ALL TIMES" -ForegroundColor Yellow
}

# Main loop with stricter input validation at end:
$script:PAHCompleted = $false
$script:PHCompleted = $false

do {
    Run-ScannerScript -SkipPAH:$script:PAHCompleted -SkipProtectionHistory:$script:PHCompleted
    $script:PAHCompleted = $true
    $script:PHCompleted = $true

    do {
        $again = Read-Host "Run Again END STEPS Y/N:`nY to run the script again`nN to not"
    } while (-not ($again -match "^(Y|y|N|n)$"))

} while ($again -match "^(Y|y)$")

Write-Host "Exiting script..." -ForegroundColor Cyan
